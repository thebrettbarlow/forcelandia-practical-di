/**
 * Utilities for working with {@link SObject} in apex.
 */
public inherited sharing class SObjectUtil {
  private static final String FAKE_ID_PATTERN = '000000000000';
  private static Integer fakeIdCount = 0;

  /**
   * Collects and returns a list of record ids from the list of sobjects.
   */
  public static List<Id> collectIds(
    List<SObject> sobjects,
    SObjectField field
  ) {
    Set<DisplayType> expectedTypes = new Set<DisplayType>{
      DisplayType.ID,
      DisplayType.REFERENCE
    };
    DisplayType actualType = field.getDescribe().getType();

    Preconditions.checkArgument(
      expectedTypes.contains(actualType),
      String.format(
        'Expected the field to be of type: {0}. Found: {1}',
        new List<Object>{ expectedTypes, actualType.name() }
      )
    );

    List<Id> ids = new List<Id>();
    for (SObject sobj : sobjects) {
      Id id = (Id) sobj.get(field);

      if (String.isNotBlank(id)) {
        ids.add(id);
      }
    }

    return ids;
  }

  /**
   * Returns a fake id for a specific sobject type.
   *
   * The ids generated by this method will be unique.
   */
  @TestVisible
  private static Id generateFakeId(SObjectType sobjectType) {
    String keyPrefix = sobjectType.getDescribe().getKeyPrefix();
    fakeIdCount++;

    String fakeIdBody = FAKE_ID_PATTERN.substring(
      0,
      FAKE_ID_PATTERN.length() - String.valueOf(fakeIdCount).length()
    );

    return Id.valueOf(keyPrefix + fakeIdBody + fakeIdCount);
  }

  /**
   * Sets read only fields on an SObject, returning a new SObject with the fields set.
   *
   * This is most commonly used in scenarios where records need to be set up in a specific way.
   * For example, setting the {@link UserLicense.UsedLicenses} field in a test.
   */
  public static SObject setReadOnlyFields(
    SObject sobj,
    Map<String, Object> fieldValues
  ) {
    String str = JSON.serialize(sobj);
    Map<String, Object> record = (Map<String, Object>) JSON.deserializeUntyped(
      str
    );

    for (String field : fieldValues.keySet()) {
      record.put(field, fieldValues.get(field));
    }

    return (SObject) JSON.deserialize(JSON.serialize(record), SObject.class);
  }
}